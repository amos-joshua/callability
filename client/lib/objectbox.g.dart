// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/model/app_settings.dart';
import 'src/model/call.dart';
import 'src/model/contact.dart';
import 'src/model/group.dart';
import 'src/model/preset.dart';
import 'src/model/schedule.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6944076959860031389),
      name: 'Contact',
      lastPropertyId: const obx_int.IdUid(10, 3164737527787531100),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4797974389121262987),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4067676655336361414),
            name: 'uid',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(1, 1686384222914709342)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3278428346733798852),
            name: 'firstName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2701474082637558788),
            name: 'lastName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8200378885262805479),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6030195380236839302),
            name: 'emails',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6065505447691667030),
            name: 'phoneNumbers',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5577847697950341711),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 1322581608779303167),
            relationTarget: 'ContactGroup'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3164737527787531100),
            name: 'lastUpdated',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 623342047535073463),
      name: 'ContactGroup',
      lastPropertyId: const obx_int.IdUid(7, 8170122180827653762),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3267953463350534318),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4399505670719997120),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8170122180827653762),
            name: 'catchAll',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'contacts', srcEntity: 'Contact', srcField: 'group')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1544121088343121460),
      name: 'Preset',
      lastPropertyId: const obx_int.IdUid(3, 907976326563887372),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2162912375215679472),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7123962742115210355),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 907976326563887372),
            name: 'isDefault',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'settings', srcEntity: 'PresetSetting', srcField: 'preset'),
        obx_int.ModelBacklink(
            name: 'schedules', srcEntity: 'Schedule', srcField: 'preset')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6889067005642288145),
      name: 'PresetSetting',
      lastPropertyId: const obx_int.IdUid(7, 3651654160738864187),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4846185692338001918),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7710225874490288271),
            name: 'groupId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4061671674190655270),
            relationTarget: 'ContactGroup'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2261782538641383298),
            name: 'presetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 2050292922020613238),
            relationTarget: 'Preset'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3421411241372115713),
            name: 'dbLeisureRingType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6007246787829361482),
            name: 'dbImportantRingType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2081292153787650993),
            name: 'dbUrgentRingType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3651654160738864187),
            name: 'ringTypeIndex',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5694653980970039150),
      name: 'AppSettings',
      lastPropertyId: const obx_int.IdUid(10, 6259722973386454594),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1084802488026547885),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8479580155334150912),
            name: 'presetOverrideId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(7, 8597281935757514098),
            relationTarget: 'Preset'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8158678211183746753),
            name: 'dbPresetOverrideStart',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4477458998925004896),
            name: 'dbPresetOverrideEnd',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2206426523142701498),
            name: 'performedFirstTimeInit',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 158081905420880527),
            name: 'currentSchemaVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 783240652877191185),
            name: 'hasReceivePushNotificationsPermissions',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6259722973386454594),
            name: 'hasNotificationPolicyAccessPermissions',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 1869482179239416967),
      name: 'Schedule',
      lastPropertyId: const obx_int.IdUid(9, 5443296225208206940),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7866024924279871091),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6027867139078458933),
            name: 'days',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8963685049698036990),
            name: 'presetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 8068368354345458056),
            relationTarget: 'Preset'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4425216391098293876),
            name: 'dbStartTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5443296225208206940),
            name: 'dbEndTime',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8233981314861037736),
      name: 'Call',
      lastPropertyId: const obx_int.IdUid(10, 6481465086428102769),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1915357789870289324),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8898274894273294255),
            name: 'contactId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 6229702043307957760),
            relationTarget: 'Contact'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3530501171345621947),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3612818594452294491),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1571297385715848214),
            name: 'answered',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5931826428070864864),
            name: 'dbUrgency',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7479894640550873969),
            name: 'subject',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6481465086428102769),
            name: 'outgoing',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 8233981314861037736),
      lastIndexId: const obx_int.IdUid(8, 6229702043307957760),
      lastRelationId: const obx_int.IdUid(1, 6011923766103352246),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [6245552165894533172],
      retiredPropertyUids: const [
        7639260266059255394,
        2427657954001712784,
        5901387048335464011,
        1749735545546734477,
        8720918440528266766,
        2845929881732879859,
        6072970671994016592,
        4925193238398785307,
        940612800916972369,
        6348588384467997228,
        1533650121442825246,
        778274461350221159,
        7442593644884128938
      ],
      retiredRelationUids: const [6011923766103352246],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Contact: obx_int.EntityDefinition<Contact>(
        model: _entities[0],
        toOneRelations: (Contact object) => [object.group],
        toManyRelations: (Contact object) => {},
        getId: (Contact object) => object.id,
        setId: (Contact object, int id) {
          object.id = id;
        },
        objectToFB: (Contact object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final displayNameOffset = fbb.writeString(object.displayName);
          final emailsOffset = fbb.writeList(
              object.emails.map(fbb.writeString).toList(growable: false));
          final phoneNumbersOffset = fbb.writeList(
              object.phoneNumbers.map(fbb.writeString).toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, firstNameOffset);
          fbb.addOffset(3, lastNameOffset);
          fbb.addOffset(4, displayNameOffset);
          fbb.addOffset(5, emailsOffset);
          fbb.addOffset(6, phoneNumbersOffset);
          fbb.addInt64(8, object.group.targetId);
          fbb.addInt64(9, object.lastUpdated.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final firstNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final lastNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final phoneNumbersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final emailsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          final object = Contact(
              id: idParam,
              uid: uidParam,
              displayName: displayNameParam,
              firstName: firstNameParam,
              lastName: lastNameParam,
              phoneNumbers: phoneNumbersParam,
              emails: emailsParam,
              lastUpdated: lastUpdatedParam);
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.group.attach(store);
          return object;
        }),
    ContactGroup: obx_int.EntityDefinition<ContactGroup>(
        model: _entities[1],
        toOneRelations: (ContactGroup object) => [],
        toManyRelations: (ContactGroup object) => {
              obx_int.RelInfo<Contact>.toOneBacklink(
                      9, object.id, (Contact srcObject) => srcObject.group):
                  object.contacts
            },
        getId: (ContactGroup object) => object.id,
        setId: (ContactGroup object, int id) {
          object.id = id;
        },
        objectToFB: (ContactGroup object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(6, object.catchAll);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final catchAllParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = ContactGroup(
              id: idParam, catchAll: catchAllParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<ContactGroup>(
              object.contacts,
              store,
              obx_int.RelInfo<Contact>.toOneBacklink(
                  9, object.id, (Contact srcObject) => srcObject.group));
          return object;
        }),
    Preset: obx_int.EntityDefinition<Preset>(
        model: _entities[2],
        toOneRelations: (Preset object) => [],
        toManyRelations: (Preset object) => {
              obx_int.RelInfo<PresetSetting>.toOneBacklink(3, object.id,
                      (PresetSetting srcObject) => srcObject.preset):
                  object.settings,
              obx_int.RelInfo<Schedule>.toOneBacklink(
                      7, object.id, (Schedule srcObject) => srcObject.preset):
                  object.schedules
            },
        getId: (Preset object) => object.id,
        setId: (Preset object, int id) {
          object.id = id;
        },
        objectToFB: (Preset object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addBool(2, object.isDefault);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isDefaultParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object =
              Preset(id: idParam, name: nameParam, isDefault: isDefaultParam);
          obx_int.InternalToManyAccess.setRelInfo<Preset>(
              object.settings,
              store,
              obx_int.RelInfo<PresetSetting>.toOneBacklink(
                  3, object.id, (PresetSetting srcObject) => srcObject.preset));
          obx_int.InternalToManyAccess.setRelInfo<Preset>(
              object.schedules,
              store,
              obx_int.RelInfo<Schedule>.toOneBacklink(
                  7, object.id, (Schedule srcObject) => srcObject.preset));
          return object;
        }),
    PresetSetting: obx_int.EntityDefinition<PresetSetting>(
        model: _entities[3],
        toOneRelations: (PresetSetting object) => [object.group, object.preset],
        toManyRelations: (PresetSetting object) => {},
        getId: (PresetSetting object) => object.id,
        setId: (PresetSetting object, int id) {
          object.id = id;
        },
        objectToFB: (PresetSetting object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.group.targetId);
          fbb.addInt64(2, object.preset.targetId);
          fbb.addInt64(3, object.dbLeisureRingType);
          fbb.addInt64(4, object.dbImportantRingType);
          fbb.addInt64(5, object.dbUrgentRingType);
          fbb.addInt64(6, object.ringTypeIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = PresetSetting(id: idParam)
            ..dbLeisureRingType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..dbImportantRingType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..dbUrgentRingType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..ringTypeIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.group.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.group.attach(store);
          object.preset.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.preset.attach(store);
          return object;
        }),
    AppSettings: obx_int.EntityDefinition<AppSettings>(
        model: _entities[4],
        toOneRelations: (AppSettings object) => [object.presetOverride],
        toManyRelations: (AppSettings object) => {},
        getId: (AppSettings object) => object.id,
        setId: (AppSettings object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettings object, fb.Builder fbb) {
          final currentSchemaVersionOffset =
              fbb.writeString(object.currentSchemaVersion);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.presetOverride.targetId);
          fbb.addInt64(4, object.dbPresetOverrideStart);
          fbb.addInt64(5, object.dbPresetOverrideEnd);
          fbb.addBool(6, object.performedFirstTimeInit);
          fbb.addOffset(7, currentSchemaVersionOffset);
          fbb.addBool(8, object.hasReceivePushNotificationsPermissions);
          fbb.addBool(9, object.hasNotificationPolicyAccessPermissions);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final hasNotificationPolicyAccessPermissionsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final hasReceivePushNotificationsPermissionsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final performedFirstTimeInitParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final currentSchemaVersionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final object = AppSettings(
              id: idParam,
              hasNotificationPolicyAccessPermissions:
                  hasNotificationPolicyAccessPermissionsParam,
              hasReceivePushNotificationsPermissions:
                  hasReceivePushNotificationsPermissionsParam,
              performedFirstTimeInit: performedFirstTimeInitParam,
              currentSchemaVersion: currentSchemaVersionParam)
            ..dbPresetOverrideStart =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..dbPresetOverrideEnd =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.presetOverride.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.presetOverride.attach(store);
          return object;
        }),
    Schedule: obx_int.EntityDefinition<Schedule>(
        model: _entities[5],
        toOneRelations: (Schedule object) => [object.preset],
        toManyRelations: (Schedule object) => {},
        getId: (Schedule object) => object.id,
        setId: (Schedule object, int id) {
          object.id = id;
        },
        objectToFB: (Schedule object, fb.Builder fbb) {
          final daysOffset = fbb.writeListInt64(object.days);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, daysOffset);
          fbb.addInt64(6, object.preset.targetId);
          fbb.addInt64(7, object.dbStartTime);
          fbb.addInt64(8, object.dbEndTime);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final daysParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 6, []);
          final object = Schedule(id: idParam, days: daysParam)
            ..dbStartTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..dbEndTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.preset.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.preset.attach(store);
          return object;
        }),
    Call: obx_int.EntityDefinition<Call>(
        model: _entities[6],
        toOneRelations: (Call object) => [object.contact],
        toManyRelations: (Call object) => {},
        getId: (Call object) => object.id,
        setId: (Call object, int id) {
          object.id = id;
        },
        objectToFB: (Call object, fb.Builder fbb) {
          final subjectOffset = fbb.writeString(object.subject);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.contact.targetId);
          fbb.addInt64(3, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.endTime?.millisecondsSinceEpoch);
          fbb.addBool(5, object.answered);
          fbb.addInt64(6, object.dbUrgency);
          fbb.addOffset(8, subjectOffset);
          fbb.addBool(9, object.outgoing);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final outgoingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final subjectParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final answeredParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Call(
              id: idParam,
              outgoing: outgoingParam,
              subject: subjectParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              answered: answeredParam)
            ..dbUrgency =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.contact.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.contact.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id =
      obx.QueryIntegerProperty<Contact>(_entities[0].properties[0]);

  /// See [Contact.uid].
  static final uid =
      obx.QueryStringProperty<Contact>(_entities[0].properties[1]);

  /// See [Contact.firstName].
  static final firstName =
      obx.QueryStringProperty<Contact>(_entities[0].properties[2]);

  /// See [Contact.lastName].
  static final lastName =
      obx.QueryStringProperty<Contact>(_entities[0].properties[3]);

  /// See [Contact.displayName].
  static final displayName =
      obx.QueryStringProperty<Contact>(_entities[0].properties[4]);

  /// See [Contact.emails].
  static final emails =
      obx.QueryStringVectorProperty<Contact>(_entities[0].properties[5]);

  /// See [Contact.phoneNumbers].
  static final phoneNumbers =
      obx.QueryStringVectorProperty<Contact>(_entities[0].properties[6]);

  /// See [Contact.group].
  static final group =
      obx.QueryRelationToOne<Contact, ContactGroup>(_entities[0].properties[7]);

  /// See [Contact.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<Contact>(_entities[0].properties[8]);
}

/// [ContactGroup] entity fields to define ObjectBox queries.
class ContactGroup_ {
  /// See [ContactGroup.id].
  static final id =
      obx.QueryIntegerProperty<ContactGroup>(_entities[1].properties[0]);

  /// See [ContactGroup.name].
  static final name =
      obx.QueryStringProperty<ContactGroup>(_entities[1].properties[1]);

  /// See [ContactGroup.catchAll].
  static final catchAll =
      obx.QueryBooleanProperty<ContactGroup>(_entities[1].properties[2]);

  /// see [ContactGroup.contacts]
  static final contacts =
      obx.QueryBacklinkToMany<Contact, ContactGroup>(Contact_.group);
}

/// [Preset] entity fields to define ObjectBox queries.
class Preset_ {
  /// See [Preset.id].
  static final id =
      obx.QueryIntegerProperty<Preset>(_entities[2].properties[0]);

  /// See [Preset.name].
  static final name =
      obx.QueryStringProperty<Preset>(_entities[2].properties[1]);

  /// See [Preset.isDefault].
  static final isDefault =
      obx.QueryBooleanProperty<Preset>(_entities[2].properties[2]);

  /// see [Preset.settings]
  static final settings =
      obx.QueryBacklinkToMany<PresetSetting, Preset>(PresetSetting_.preset);

  /// see [Preset.schedules]
  static final schedules =
      obx.QueryBacklinkToMany<Schedule, Preset>(Schedule_.preset);
}

/// [PresetSetting] entity fields to define ObjectBox queries.
class PresetSetting_ {
  /// See [PresetSetting.id].
  static final id =
      obx.QueryIntegerProperty<PresetSetting>(_entities[3].properties[0]);

  /// See [PresetSetting.group].
  static final group = obx.QueryRelationToOne<PresetSetting, ContactGroup>(
      _entities[3].properties[1]);

  /// See [PresetSetting.preset].
  static final preset =
      obx.QueryRelationToOne<PresetSetting, Preset>(_entities[3].properties[2]);

  /// See [PresetSetting.dbLeisureRingType].
  static final dbLeisureRingType =
      obx.QueryIntegerProperty<PresetSetting>(_entities[3].properties[3]);

  /// See [PresetSetting.dbImportantRingType].
  static final dbImportantRingType =
      obx.QueryIntegerProperty<PresetSetting>(_entities[3].properties[4]);

  /// See [PresetSetting.dbUrgentRingType].
  static final dbUrgentRingType =
      obx.QueryIntegerProperty<PresetSetting>(_entities[3].properties[5]);

  /// See [PresetSetting.ringTypeIndex].
  static final ringTypeIndex =
      obx.QueryIntegerProperty<PresetSetting>(_entities[3].properties[6]);
}

/// [AppSettings] entity fields to define ObjectBox queries.
class AppSettings_ {
  /// See [AppSettings.id].
  static final id =
      obx.QueryIntegerProperty<AppSettings>(_entities[4].properties[0]);

  /// See [AppSettings.presetOverride].
  static final presetOverride =
      obx.QueryRelationToOne<AppSettings, Preset>(_entities[4].properties[1]);

  /// See [AppSettings.dbPresetOverrideStart].
  static final dbPresetOverrideStart =
      obx.QueryIntegerProperty<AppSettings>(_entities[4].properties[2]);

  /// See [AppSettings.dbPresetOverrideEnd].
  static final dbPresetOverrideEnd =
      obx.QueryIntegerProperty<AppSettings>(_entities[4].properties[3]);

  /// See [AppSettings.performedFirstTimeInit].
  static final performedFirstTimeInit =
      obx.QueryBooleanProperty<AppSettings>(_entities[4].properties[4]);

  /// See [AppSettings.currentSchemaVersion].
  static final currentSchemaVersion =
      obx.QueryStringProperty<AppSettings>(_entities[4].properties[5]);

  /// See [AppSettings.hasReceivePushNotificationsPermissions].
  static final hasReceivePushNotificationsPermissions =
      obx.QueryBooleanProperty<AppSettings>(_entities[4].properties[6]);

  /// See [AppSettings.hasNotificationPolicyAccessPermissions].
  static final hasNotificationPolicyAccessPermissions =
      obx.QueryBooleanProperty<AppSettings>(_entities[4].properties[7]);
}

/// [Schedule] entity fields to define ObjectBox queries.
class Schedule_ {
  /// See [Schedule.id].
  static final id =
      obx.QueryIntegerProperty<Schedule>(_entities[5].properties[0]);

  /// See [Schedule.days].
  static final days =
      obx.QueryIntegerVectorProperty<Schedule>(_entities[5].properties[1]);

  /// See [Schedule.preset].
  static final preset =
      obx.QueryRelationToOne<Schedule, Preset>(_entities[5].properties[2]);

  /// See [Schedule.dbStartTime].
  static final dbStartTime =
      obx.QueryIntegerProperty<Schedule>(_entities[5].properties[3]);

  /// See [Schedule.dbEndTime].
  static final dbEndTime =
      obx.QueryIntegerProperty<Schedule>(_entities[5].properties[4]);
}

/// [Call] entity fields to define ObjectBox queries.
class Call_ {
  /// See [Call.id].
  static final id = obx.QueryIntegerProperty<Call>(_entities[6].properties[0]);

  /// See [Call.contact].
  static final contact =
      obx.QueryRelationToOne<Call, Contact>(_entities[6].properties[1]);

  /// See [Call.startTime].
  static final startTime =
      obx.QueryDateProperty<Call>(_entities[6].properties[2]);

  /// See [Call.endTime].
  static final endTime =
      obx.QueryDateProperty<Call>(_entities[6].properties[3]);

  /// See [Call.answered].
  static final answered =
      obx.QueryBooleanProperty<Call>(_entities[6].properties[4]);

  /// See [Call.dbUrgency].
  static final dbUrgency =
      obx.QueryIntegerProperty<Call>(_entities[6].properties[5]);

  /// See [Call.subject].
  static final subject =
      obx.QueryStringProperty<Call>(_entities[6].properties[6]);

  /// See [Call.outgoing].
  static final outgoing =
      obx.QueryBooleanProperty<Call>(_entities[6].properties[7]);
}
